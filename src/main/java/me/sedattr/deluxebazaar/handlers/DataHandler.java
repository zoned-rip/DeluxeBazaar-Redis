package me.sedattr.deluxebazaar.handlers;import de.tr7zw.changeme.nbtapi.NBT;import de.tr7zw.changeme.nbtapi.iface.ReadWriteNBT;import me.sedattr.deluxebazaar.DeluxeBazaar;import me.sedattr.deluxebazaar.addons.*;import me.sedattr.deluxebazaar.database.MySQLDatabase;import me.sedattr.deluxebazaar.database.RedisDatabase;import me.sedattr.deluxebazaar.database.SQLiteDatabase;import me.sedattr.deluxebazaar.database.YamlDatabase;import me.sedattr.deluxebazaar.economy.*;import me.sedattr.deluxebazaar.managers.BazaarItem;import me.sedattr.deluxebazaar.menus.InputMenu;import me.sedattr.deluxebazaar.others.*;import net.milkbowl.vault.economy.Economy;import net.objecthunter.exp4j.Expression;import net.objecthunter.exp4j.ExpressionBuilder;import org.bukkit.Bukkit;import org.bukkit.configuration.ConfigurationSection;import org.bukkit.configuration.file.YamlConfiguration;import org.bukkit.inventory.ItemStack;import org.bukkit.plugin.RegisteredServiceProvider;import java.io.File;import java.io.FileWriter;import java.io.PrintWriter;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.*;public class DataHandler {    private final File log = new File(DeluxeBazaar.getInstance().getDataFolder(), "logs.txt");    private final boolean logEnabled = DeluxeBazaar.getInstance().getConfig().getBoolean("settings.enable_log", true);    public boolean load() {        DeluxeBazaar.getInstance().configFile = DeluxeBazaar.getInstance().getConfig();        if (!setupEconomy()) {            Logger.sendConsoleMessage("There is a problem in economy setup! Plugin is disabling...", Logger.LogLevel.ERROR);            return false;        }        loadAddons();        DeluxeBazaar.getInstance().economyHandler = new EconomyHandler();        DeluxeBazaar.getInstance().orderHandler = new OrderHandler();        DeluxeBazaar.getInstance().menuHandler = new MenuHandler();        DeluxeBazaar.getInstance().itemHandler = new ItemHandler();        DeluxeBazaar.getInstance().numberFormat = new NumberFormat();        DeluxeBazaar.getInstance().inputMenu = new InputMenu();        createDefaultFiles();        registerAllItems();        registerItems();        registerSubcategories();        return true;    }    public void startDataTask() {        if (DeluxeBazaar.getInstance().databaseManager instanceof MySQLDatabase) {            int syncInterval = DeluxeBazaar.getInstance().configFile.getInt("database.sync_interval", 0);            if (syncInterval > 0) {                TaskUtils.runTimer(() -> {                    TaskUtils.runAsync(() -> {                        MySQLDatabase mysqlDb = (MySQLDatabase) DeluxeBazaar.getInstance().databaseManager;                        for (BazaarItem item : DeluxeBazaar.getInstance().bazaarItems.values()) {                            item.getBuyPrices().clear();                            item.getSellPrices().clear();                        }                        DeluxeBazaar.getInstance().players.clear();                        DeluxeBazaar.getInstance().databaseManager.loadDatabase();                        Logger.sendConsoleMessage("Cross-server data synced from MySQL.", Logger.LogLevel.INFO);                    });                }, syncInterval * 20L, syncInterval * 20L);                Logger.sendConsoleMessage("Cross-server sync enabled. Interval: " + syncInterval + " seconds", Logger.LogLevel.INFO);            }        }        if (!DeluxeBazaar.getInstance().configFile.getBoolean("item_price_changing.enabled"))            return;        int time = DeluxeBazaar.getInstance().configFile.getInt("item_price_changing.time", 0);        if (time > 0) {            TaskUtils.runTimer(() -> {                reloadPrices();                Logger.sendConsoleMessage("Item prices & amounts are saved to database.", Logger.LogLevel.INFO);            }, time * 1200L, time * 1200L);        }        if (!DeluxeBazaar.getInstance().configFile.getBoolean("item_price_changing.refresh.enabled"))            return;        int refresh = DeluxeBazaar.getInstance().configFile.getInt("item_price_changing.refresh.time", 0);        if (refresh <= 0)            return;        TaskUtils.runTimer(() -> {            refreshPrices();            Logger.sendConsoleMessage("Item prices are refreshed.", Logger.LogLevel.INFO);        }, time * 1200L, time * 1200L);    }    public void loadAddons() {        ConfigurationSection addons = DeluxeBazaar.getInstance().configFile.getConfigurationSection("addons");        if (addons == null)            return;        if (Bukkit.getPluginManager().isPluginEnabled("PlaceholderAPI")) {            DeluxeBazaar.getInstance().placeholderApi = true;            new Placeholders().register();            Logger.sendConsoleMessage("Enabled &fPlaceholderAPI %level_color%support!", Logger.LogLevel.INFO);        }        if (Bukkit.getPluginManager().isPluginEnabled("HeadDatabase")) {            DeluxeBazaar.getInstance().headDatabase = new HeadDatabase();            Bukkit.getPluginManager().registerEvents(DeluxeBazaar.getInstance().headDatabase, DeluxeBazaar.getInstance());            Logger.sendConsoleMessage("Enabled &fHeadDatabase %level_color%support!", Logger.LogLevel.INFO);        }        if (Bukkit.getPluginManager().isPluginEnabled("MMOItems")) {            DeluxeBazaar.getInstance().mmoItemsAddon = new MMOItemsAddon();            Logger.sendConsoleMessage("Enabled &fMMOItems %level_color%support!", Logger.LogLevel.INFO);        }        if (Bukkit.getPluginManager().isPluginEnabled("EcoItems")) {            DeluxeBazaar.getInstance().ecoItemsAddon = new EcoItemsAddon();            Logger.sendConsoleMessage("Enabled &fEcoItems %level_color%support!", Logger.LogLevel.INFO);        }        if (Bukkit.getPluginManager().isPluginEnabled("ExecutableItems")) {            DeluxeBazaar.getInstance().executableItemsAddon = new ExecutableItemsAddon();            Logger.sendConsoleMessage("Enabled &fExecutableItems %level_color%support!", Logger.LogLevel.INFO);        }        if (addons.getBoolean("discord.enabled")) {            DeluxeBazaar.getInstance().discordWebhook = new DiscordWebhook(addons.getString("discord.webhook_url"));            Logger.sendConsoleMessage("Enabled &fDiscord Webhook %level_color%support!", Logger.LogLevel.INFO);        }    }    public void writeToLog(String inject) {        if (!logEnabled)            return;        TaskUtils.run(() -> {            DateFormat simple = new SimpleDateFormat("[MM/dd/yyyy kk:mm:ss] ");            try {                FileWriter fileWriter = new FileWriter(this.log, true);                PrintWriter printWriter = new PrintWriter(fileWriter);                printWriter.println(simple.format(new Date())+inject);                printWriter.close();            } catch(Exception e) {                e.printStackTrace();            }        });    }    public void createDefaultFiles() {        try {            if (!this.log.exists())                this.log.createNewFile();        } catch (Exception e) {            e.printStackTrace();        }        File file1 = new File(DeluxeBazaar.getInstance().getDataFolder(), "items.yml");        try {            if (!file1.exists())                DeluxeBazaar.getInstance().saveResource("items.yml", false);            YamlConfiguration configuration = new YamlConfiguration();            configuration.load(file1);            DeluxeBazaar.getInstance().itemsFile = configuration;        } catch (Exception e) {            e.printStackTrace();        }        File file2 = new File(DeluxeBazaar.getInstance().getDataFolder(), "menus.yml");        try {            if (!file2.exists())                DeluxeBazaar.getInstance().saveResource("menus.yml", false);            YamlConfiguration configuration = new YamlConfiguration();            configuration.load(file2);            DeluxeBazaar.getInstance().menusFile = configuration;        } catch (Exception e) {            e.printStackTrace();        }        File file3 = new File(DeluxeBazaar.getInstance().getDataFolder(), "categories.yml");        try {            if (!file3.exists())                DeluxeBazaar.getInstance().saveResource("categories.yml", false);            YamlConfiguration configuration = new YamlConfiguration();            configuration.load(file3);            DeluxeBazaar.getInstance().categoriesFile = configuration;        } catch (Exception e) {            e.printStackTrace();        }        File file4 = new File(DeluxeBazaar.getInstance().getDataFolder(), "messages.yml");        try {            if (!file4.exists())                DeluxeBazaar.getInstance().saveResource("messages.yml", false);            YamlConfiguration configuration = new YamlConfiguration();            configuration.load(file4);            DeluxeBazaar.getInstance().messagesFile = configuration;        } catch (Exception e) {            e.printStackTrace();        }    }    public void registerSubcategories() {        ConfigurationSection subcategories = DeluxeBazaar.getInstance().itemsFile.getConfigurationSection("groups");        if (subcategories == null)            return;        Set<String> keys = subcategories.getKeys(false);        if (keys.isEmpty())            return;        for (String key : keys) {            ConfigurationSection subcategory = subcategories.getConfigurationSection(key);            if (subcategory == null)                continue;            List<String> items = subcategory.getStringList("item_list");            if (items.isEmpty())                continue;            for (String item : items) {                BazaarItem bazaarItem = DeluxeBazaar.getInstance().bazaarItems.get(item.split("[:]", 2)[0]);                if (bazaarItem == null)                    continue;                bazaarItem.setSubcategory(key);            }        }    }    public void registerAllItems() {        DeluxeBazaar.getInstance().bazaarItems = new HashMap<>();        ConfigurationSection itemsSection = DeluxeBazaar.getInstance().itemsFile.getConfigurationSection("items");        if (itemsSection == null)            return;        ConfigurationSection subcategoriesSection = DeluxeBazaar.getInstance().itemsFile.getConfigurationSection("groups");        HashMap<String, BazaarItem> items = new HashMap<>();        Set<String> categories = DeluxeBazaar.getInstance().categoriesFile.getKeys(false);        if (!categories.isEmpty()) {            for (String category : categories) {                if (category.equals("search"))                    continue;                List<String> keys = DeluxeBazaar.getInstance().categoriesFile.getStringList(category + ".items");                if (!keys.isEmpty()) {                    for (String key : keys) {                        ConfigurationSection itemSection = itemsSection.getConfigurationSection(key);                        if (itemSection != null) {                            if (DeluxeBazaar.getInstance().bazaarItems.containsKey(key))                                continue;                            BazaarItem bazaarItem = loadItem(itemsSection, itemSection, key, category);                            if (bazaarItem == null)                                continue;                            items.put(key, bazaarItem);                        } else {                            if (subcategoriesSection == null)                                continue;                            ConfigurationSection subcategorySection = subcategoriesSection.getConfigurationSection(key);                            if (subcategorySection == null)                                continue;                            List<String> list = subcategorySection.getStringList("item_list");                            if (list.isEmpty())                                continue;                            for (String args : list) {                                String name = args.split(":")[0];                                BazaarItem bazaarItem = DeluxeBazaar.getInstance().bazaarItems.get(name);                                if (bazaarItem != null) {                                    bazaarItem.setSubcategory(key);                                    continue;                                }                                ConfigurationSection otherItemSection = itemsSection.getConfigurationSection(name);                                if (otherItemSection == null)                                    continue;                                BazaarItem newBazaarItem = loadItem(itemsSection, otherItemSection, name, category);                                if (newBazaarItem == null)                                    continue;                                newBazaarItem.setSubcategory(key);                                items.put(name, newBazaarItem);                            }                        }                    }                }            }        }        DeluxeBazaar.getInstance().bazaarItems = items;    }    public BazaarItem loadItem(ConfigurationSection itemsSection, ConfigurationSection itemSection, String key, String category) {        ItemStack itemStack = Utils.createItemFromSection(itemSection, null);        if (itemStack == null)            return null;        if (itemSection.getBoolean("enable_nbt")) {            ReadWriteNBT itemNBT = NBT.itemStackToNBT(itemStack);            itemNBT.setString("BazaarITEM", itemSection.getName());            itemStack = NBT.itemStackFromNBT(itemNBT);        }        if (itemSection.getBoolean("normal"))            itemStack = new ItemStack(itemStack.getType(), 1, (short) itemSection.getInt("data"));        BazaarItem bazaarItem = new BazaarItem(key, itemStack, itemsSection.getDouble(key + ".prices.buy"), itemsSection.getDouble(key + ".prices.sell"));        double maximumBuyPrice = itemsSection.getDouble(key + ".max_prices.buy", 0.0);        if (maximumBuyPrice > 0.0)            bazaarItem.setMaximumBuyPrice(maximumBuyPrice);        double maximumSellPrice = itemsSection.getDouble(key + ".max_prices.sell", 0.0);        if (maximumSellPrice > 0.0)            bazaarItem.setMaximumSellPrice(maximumSellPrice);        bazaarItem.setCategory(category);        return bazaarItem;    }    public void registerItems() {        DeluxeBazaar.getInstance().normalItems = new HashMap<>();        HashMap<String, ItemStack> normalItems = new HashMap<>();        YamlConfiguration categorySection = DeluxeBazaar.getInstance().categoriesFile;        if (categorySection != null) {            Set<String> keys = categorySection.getKeys(false);            if (!keys.isEmpty()) {                for (String entry : keys) {                    if (entry.equalsIgnoreCase("lore"))                        continue;                    Object object = categorySection.get(entry);                    if (object instanceof ItemStack) {                        normalItems.put(entry, (ItemStack) object);                        continue;                    }                    ItemStack item = Utils.createItemFromSection(categorySection.getConfigurationSection(entry), null);                    if (item == null)                        continue;                    normalItems.put(entry, item);                }            }        }        ConfigurationSection itemSection = DeluxeBazaar.getInstance().menusFile.getConfigurationSection("items");        if (itemSection != null) {            Set<String> keys = itemSection.getKeys(false);            if (!keys.isEmpty())                for (String entry : keys) {                    Object object = itemSection.get(entry);                    if (object instanceof ItemStack) {                        normalItems.put(entry, (ItemStack) object);                        continue;                    }                    ItemStack item = Utils.createItemFromSection(itemSection.getConfigurationSection(entry), null);                    if (item == null)                        continue;                    normalItems.put(entry, item);                }        }        DeluxeBazaar.getInstance().normalItems = normalItems;    }    public void setupDatabase() {        String dataType = DeluxeBazaar.getInstance().getConfig().getString("database.type");        if (dataType == null || dataType.equals(""))            dataType = "yaml";        switch (dataType.toLowerCase()) {            case "sqlite":                DeluxeBazaar.getInstance().databaseManager = new SQLiteDatabase();                break;            case "mysql":                DeluxeBazaar.getInstance().databaseManager = new MySQLDatabase();                break;            case "redis":                DeluxeBazaar.getInstance().databaseManager = new RedisDatabase();                break;            default:                DeluxeBazaar.getInstance().databaseManager = new YamlDatabase();                break;        }        DeluxeBazaar.getInstance().databaseManager.loadDatabase();    }    public Boolean setupEconomy() {        String economyType = DeluxeBazaar.getInstance().configFile.getString("economy.type", "vault");        if (economyType.equals(""))            return false;        switch (economyType.toLowerCase()) {            case "vault":                if (!Bukkit.getServer().getPluginManager().isPluginEnabled("Vault"))                    return false;                RegisteredServiceProvider<Economy> rsp = Bukkit.getServer().getServicesManager().getRegistration(Economy.class);                if (rsp == null)                    return false;                DeluxeBazaar.getInstance().economy = rsp.getProvider();                DeluxeBazaar.getInstance().economyManager = new VaultEconomy();                return true;            case "coinsengine":                if (!Bukkit.getPluginManager().isPluginEnabled("CoinsEngine"))                    return false;                DeluxeBazaar.getInstance().economyManager = new CoinsEngineEconomy();                return true;            case "royaleeconomy_balance":                if (!Bukkit.getServer().getPluginManager().isPluginEnabled("RoyaleEconomy"))                    return false;                DeluxeBazaar.getInstance().economyManager = new RoyaleEconomyBalance();                return true;            case "royaleeconomy_bank":                if (!Bukkit.getServer().getPluginManager().isPluginEnabled("RoyaleEconomy"))                    return false;                DeluxeBazaar.getInstance().economyManager = new RoyaleEconomyBank();                return true;            case "lands":                if (!Bukkit.getServer().getPluginManager().isPluginEnabled("Lands"))                    return false;                DeluxeBazaar.getInstance().economyManager = new LandsEconomy();                return true;            case "playerpoints":                if (!Bukkit.getServer().getPluginManager().isPluginEnabled("PlayerPoints"))                    return false;                DeluxeBazaar.getInstance().economyManager = new PlayerPointsEconomy();                return true;            case "ultraeconomy":                if (!Bukkit.getServer().getPluginManager().isPluginEnabled("UltraEconomy"))                    return false;                DeluxeBazaar.getInstance().economyManager = new UltraEconomy();                return true;            default:                DeluxeBazaar.getInstance().economyManager = new YamlEconomy();                return true;        }    }    public double getNewPrice(BazaarItem item, PlaceholderUtil placeholderUtil, int amount, String type, String sectionType) {        ConfigurationSection priceSection = DeluxeBazaar.getInstance().configFile.getConfigurationSection("item_price_changing." + type + "_price");        if (priceSection == null)            return 0.0;        String formula = priceSection.getString("formula");        if (formula == null || formula.equals(""))            return 0.0;        int minimumAmount = priceSection.getInt("minimum_" + type + "_amount", 0);        if (minimumAmount > amount)            return 0.0;        ConfigurationSection section = priceSection.getConfigurationSection(sectionType);        if (section == null)            return 0.0;        if (!section.getBoolean("enabled", true))            return 0.0;        formula = Utils.replacePlaceholders(formula, placeholderUtil);        Expression e = new ExpressionBuilder(formula).build();        double formulaPrice = e.evaluate();        double oldPrice = type.equals("buy") ? item.getBuyPrice() : item.getSellPrice();        double newPrice;        double percentage = section.getDouble("maximum_price_change", 0.0);        double maxChange = percentage > 0.0 ? oldPrice / 100 * percentage : 0.0;        String formulaType = section.getString("type", sectionType.equalsIgnoreCase("high_supply") ? "decrease" : "increase");        if (formulaType.equalsIgnoreCase("increase")) {            newPrice = maxChange > 0.0 && formulaPrice > maxChange ?                    oldPrice + maxChange :                    oldPrice + formulaPrice;            if (newPrice < oldPrice)                newPrice = oldPrice;        } else if (formulaType.equalsIgnoreCase("decrease")) {            newPrice = maxChange > 0.0 && formulaPrice > maxChange ?                    oldPrice - maxChange :                    oldPrice - formulaPrice;            if (newPrice > oldPrice)                newPrice = oldPrice;        } else            newPrice = formulaPrice;        return newPrice;    }    public void reloadPrices() {        HashMap<String, BazaarItem> bazaarItems = DeluxeBazaar.getInstance().bazaarItems;        if (bazaarItems.isEmpty())            return;        for (Map.Entry<String, BazaarItem> entry : bazaarItems.entrySet()) {            BazaarItem item = entry.getValue();            if (item == null)                continue;            double oldBuyPrice = item.getBuyPrice();            double oldSellPrice = item.getSellPrice();            int oldBuyCount = item.getOldBuyCount();            int oldSellCount = item.getOldSellCount();            int currentBuyCount = item.getCurrentBuyCount();            int currentSellCount = item.getCurrentSellCount();            item.setOldBuyCount(currentBuyCount);            item.setOldSellCount(currentSellCount);            item.setCurrentBuyCount(0);            item.setCurrentSellCount(0);            PlaceholderUtil placeholderUtil = new PlaceholderUtil()                    .addPlaceholder("%item_sell_price%", String.valueOf(oldSellPrice))                    .addPlaceholder("%item_sell_amount%", String.valueOf(Math.abs(currentSellCount - oldSellCount)))                    .addPlaceholder("%item_buy_amount%", String.valueOf(Math.abs(currentBuyCount - oldBuyCount)))                    .addPlaceholder("%item_buy_price%", String.valueOf(oldBuyPrice));            double newBuyPrice = getNewPrice(item, placeholderUtil, currentBuyCount, "buy", (oldBuyCount > currentBuyCount ? "high_supply" : "high_demand"));            double newSellPrice = getNewPrice(item, placeholderUtil, currentSellCount, "sell", (oldSellCount > currentSellCount ? "high_demand" : "high_supply"));            if ((newSellPrice > 0.0 && newBuyPrice > 0.0) && newSellPrice > newBuyPrice)                continue;            double gap = DeluxeBazaar.getInstance().configFile.getDouble("item_price_changing.price_gap", 0.0);            if (gap > 0.0) {                double currentGap = newBuyPrice - newSellPrice;                if (gap > currentGap) {                    currentGap = gap - currentGap;                    if (newBuyPrice > 0.0 && newSellPrice > 0.0) {                        newSellPrice -= currentGap / 2;                        newBuyPrice += currentGap / 2;                    }                }            }            if (newBuyPrice > 0.0) {                double maxPrice = DeluxeBazaar.getInstance().itemsFile.getDouble("items." + item.getName() + ".max_prices.buy", 0.0);                if (maxPrice > 0.0 && newBuyPrice > maxPrice)                    newBuyPrice = maxPrice;                double minPrice = DeluxeBazaar.getInstance().itemsFile.getDouble("items." + item.getName() + ".min_prices.buy", 0.0);                if (minPrice > 0.0 && minPrice > newBuyPrice)                    newBuyPrice = minPrice;                if (newBuyPrice != oldBuyPrice) {                    item.setBuyPrice(newBuyPrice);                    writeToLog("[ITEM BUY PRICE CHANGED] " + item.getName() + " item's buy price changed from " + (oldBuyPrice) + " to " + (item.getBuyPrice()) + ". " + "(old buy count: " + oldBuyCount + ", new buy count: " + currentBuyCount + ")");                }            }            if (newSellPrice > 0.0) {                double maxPrice = DeluxeBazaar.getInstance().itemsFile.getDouble("items." + item.getName() + ".max_prices.sell", 0.0);                if (maxPrice > 0.0 && newSellPrice > maxPrice)                    newSellPrice = maxPrice;                double minPrice = DeluxeBazaar.getInstance().itemsFile.getDouble("items." + item.getName() + ".min_prices.sell", 0.0);                if (minPrice > 0.0 && minPrice > newSellPrice)                    newSellPrice = minPrice;                if (newSellPrice != oldSellPrice) {                    item.setSellPrice(newSellPrice);                    writeToLog("[ITEM SELL PRICE CHANGED] " + item.getName() + " item's sell price changed from " + (oldSellPrice) + " to " + (item.getSellPrice()) + ". " + "(old sell count: " + oldSellCount + ", new sell count: " + currentSellCount + ")");                }            }        }    }    public void refreshPrices() {        HashMap<String, BazaarItem> bazaarItems = DeluxeBazaar.getInstance().bazaarItems;        if (bazaarItems.isEmpty())            return;        for (Map.Entry<String, BazaarItem> entry : bazaarItems.entrySet()) {            BazaarItem item = entry.getValue();            if (item == null)                continue;            double oldBuyPrice = item.getBuyPrice();            double oldSellPrice = item.getSellPrice();            double defaultBuyPrice = DeluxeBazaar.getInstance().itemsFile.getDouble("items." + item.getName() + ".prices.buy", 0.0);            double defaultSellPrice = DeluxeBazaar.getInstance().itemsFile.getDouble("items." + item.getName() + ".prices.sell", 0.0);            PlaceholderUtil placeholderUtil = new PlaceholderUtil()                    .addPlaceholder("%item_sell_price%", String.valueOf(oldSellPrice))                    .addPlaceholder("%item_buy_price%", String.valueOf(oldBuyPrice))                    .addPlaceholder("%default_buy_price%", String.valueOf(defaultBuyPrice))                    .addPlaceholder("%default_sell_price%", String.valueOf(defaultSellPrice));            if (defaultBuyPrice > 0.0 && oldBuyPrice > defaultBuyPrice) {                String formula = DeluxeBazaar.getInstance().configFile.getString("item_price_changing.refresh.buy_formula");                if (formula != null && !formula.equals("")) {                    formula = Utils.replacePlaceholders(formula, placeholderUtil);                    Expression e = new ExpressionBuilder(formula).build();                    double formulaPrice = e.evaluate();                    double newBuyPrice = oldBuyPrice - formulaPrice;                    item.setBuyPrice(Math.max(defaultBuyPrice, newBuyPrice));                    writeToLog("[ITEM BUY PRICE DECREASED] " + item.getName() + " item's buy price changed from " + (oldBuyPrice) + " to " + (item.getBuyPrice()) + ".");                }            }            if (defaultSellPrice > 0.0 && defaultSellPrice > oldSellPrice) {                String formula = DeluxeBazaar.getInstance().configFile.getString("item_price_changing.refresh.sell_formula");                if (formula != null && !formula.equals("")) {                    formula = Utils.replacePlaceholders(formula, placeholderUtil);                    Expression e = new ExpressionBuilder(formula).build();                    double formulaPrice = e.evaluate();                    double newSellPrice = oldSellPrice + formulaPrice;                    item.setSellPrice(Math.min(newSellPrice, defaultSellPrice));                    writeToLog("[ITEM SELL PRICE INCREASED] " + item.getName() + " item's sell price changed from " + (oldSellPrice) + " to " + (item.getSellPrice()) + ".");                }            }        }    }    /*    public void reloadPrices() {        ConfigurationSection itemsSection = DeluxeBazaar.getInstance().configFile.getConfigurationSection("item_price_changing");        if (!itemsSection.getBoolean("enabled"))            return;        double priceGap = itemsSection.getDouble("price_gap", 0.0);        HashMap<String, BazaarItem> bazaarItems = DeluxeBazaar.getInstance().bazaarItems;        if (bazaarItems.isEmpty())            return;        for (Map.Entry<String, BazaarItem> entry : bazaarItems.entrySet()) {            BazaarItem item = entry.getValue();            if (item == null)                continue;            double oldBuyPrice = item.getBuyPrice();            double oldSellPrice = item.getSellPrice();            int oldBuyCount = item.getCurrentBuyCount();            int oldSellCount = item.getCurrentSellCount();            item.setCurrentBuyCount(0);            item.setCurrentSellCount(0);            PlaceholderUtil placeholderUtil = new PlaceholderUtil()                    .addPlaceholder("%item_sell_price%", String.valueOf(oldSellPrice))                    .addPlaceholder("%item_sell_amount%", String.valueOf(oldSellCount))                    .addPlaceholder("%item_buy_amount%", String.valueOf(oldBuyCount))                    .addPlaceholder("%item_buy_price%", String.valueOf(oldBuyPrice));            ConfigurationSection highSupply = itemsSection.getConfigurationSection("high_supply");            if (highSupply != null) {                int minimumSellAmount = highSupply.getInt("minimum_sell_amount", 0);                if (oldSellCount > minimumSellAmount) {                    String formula = itemsSection.getString("buy_price.formula");                    if (formula != null && !formula.equals("")) {                        formula = Utils.replacePlaceholders(formula, placeholderUtil);                        Expression e = new ExpressionBuilder(formula).build();                        double formulaPrice = e.evaluate();                        double newPrice;                        double maxChange = highSupply.getDouble("maximum_price_change", 0.0);                        String type = highSupply.getString("type", "decrease");                        if (type.equalsIgnoreCase("increase")) {                            newPrice = maxChange > 0.0 && formulaPrice > maxChange ?                                    oldBuyPrice + maxChange :                                    oldBuyPrice + formulaPrice;                            if (newPrice < oldBuyPrice)                                newPrice = oldBuyPrice;                        } else if (type.equalsIgnoreCase("decrease")) {                            newPrice = maxChange > 0.0 && formulaPrice > maxChange ?                                    oldBuyPrice - maxChange :                                    oldBuyPrice - formulaPrice;                            if (newPrice > oldBuyPrice)                                newPrice = oldBuyPrice;                        } else                            newPrice = formulaPrice;                        double maxPrice = DeluxeBazaar.getInstance().itemsFile.getDouble("items." + item + ".max_prices.buy", 0.0);                        if (maxPrice > 0.0 && newPrice > maxPrice)                            newPrice = maxPrice;                        if (newPrice <= 0.0)                            newPrice = oldBuyPrice;                        double minPrice = DeluxeBazaar.getInstance().itemsFile.getDouble("items." + item + ".min_prices.buy", 0.0);                        if (minPrice > 0.0 && minPrice > newPrice)                            newPrice = minPrice;                        item.setBuyPrice(newPrice);                    }                }            }            ConfigurationSection highDemand = itemsSection.getConfigurationSection("high_supply");        }    }    */    /*    public void reloadPrices() {        ConfigurationSection itemsSection = DeluxeBazaar.getInstance().configFile.getConfigurationSection("item_price_changing");        if (!itemsSection.getBoolean("enabled"))            return;        HashMap<String, BazaarItem> bazaarItems = DeluxeBazaar.getInstance().bazaarItems;        if (bazaarItems.isEmpty())            return;        for (Map.Entry<String, BazaarItem> entry : bazaarItems.entrySet()) {            BazaarItem item = entry.getValue();            if (item == null)                continue;            double oldBuyPrice = item.getBuyPrice();            double oldSellPrice = item.getSellPrice();            int oldBuyCount = item.getCurrentBuyCount();            int oldSellCount = item.getCurrentSellCount();            item.setCurrentBuyCount(0);            item.setCurrentSellCount(0);            if (oldSellCount >= itemsSection.getInt("buy_price.minimum_sell_amount")) {                String buyFormula = itemsSection.getString("buy_price.formula")                        .replace("%item_sell_price%", String.valueOf(oldSellPrice))                        .replace("%item_sell_amount%", String.valueOf(oldSellCount))                        .replace("%item_buy_amount%", String.valueOf(oldBuyCount))                        .replace("%item_buy_price%", String.valueOf(oldBuyPrice));                Expression e = new ExpressionBuilder(buyFormula).build();                double newBuyPrice = e.evaluate();                double maxChange = itemsSection.getDouble("buy_price.maximum_price_change");                double maxPrice = DeluxeBazaar.getInstance().itemsFile.getDouble("items." + item + ".max_prices.buy", 0.0);                double newPrice;                if (itemsSection.getString("buy_price.type").equalsIgnoreCase("increase")) {                    newPrice = newBuyPrice > maxChange ?                            oldBuyPrice + maxChange :                            oldBuyPrice + newBuyPrice;                    if (newPrice < oldBuyPrice)                        newPrice = oldBuyPrice;                } else if (itemsSection.getString("buy_price.type").equalsIgnoreCase("decrease")) {                    newPrice = newBuyPrice > maxChange ?                            oldBuyPrice - maxChange :                            oldBuyPrice - newBuyPrice;                    if (newPrice > oldBuyPrice)                        newPrice = oldBuyPrice;                } else                    newPrice = newBuyPrice;                if (maxPrice > 0.0 && newPrice > maxPrice)                    newPrice = maxPrice;                if (newPrice <= 0.0)                    newPrice = oldBuyPrice;                double minPrice = DeluxeBazaar.getInstance().itemsFile.getDouble("items." + item + ".min_prices.buy", 0.0);                if (minPrice > 0.0 && minPrice > newPrice)                    newPrice = minPrice;                item.setBuyPrice(newPrice);            }            if (oldBuyCount >= itemsSection.getInt("sell_price.minimum_buy_amount")) {                String sellFormula = itemsSection.getString("sell_price.formula")                        .replace("%item_sell_price%", String.valueOf(oldSellPrice))                        .replace("%item_sell_amount%", String.valueOf(oldSellCount))                        .replace("%item_buy_amount%", String.valueOf(oldBuyCount))                        .replace("%item_buy_price%", String.valueOf(oldBuyPrice));                Expression e = new ExpressionBuilder(sellFormula).build();                double newSellPrice = e.evaluate();                double maxChange = itemsSection.getDouble("sell_price.maximum_price_change");                double maxPrice = DeluxeBazaar.getInstance().itemsFile.getDouble("items." + item + ".max_prices.sell", 0.0);                double newPrice;                if (itemsSection.getString("sell_price.type").equalsIgnoreCase("increase")) {                    newPrice = newSellPrice > maxChange ?                            oldSellPrice + maxChange :                            oldSellPrice + newSellPrice;                    if (newPrice < oldSellPrice)                        newPrice = oldSellPrice;                } else if (itemsSection.getString("sell_price.type").equalsIgnoreCase("decrease")) {                    newPrice = newSellPrice > maxChange ?                            oldSellPrice - maxChange :                            oldSellPrice - newSellPrice;                    if (newPrice > oldSellPrice)                        newPrice = oldSellPrice;                } else                    newPrice = newSellPrice;                if (maxPrice > 0.0 && newPrice > maxPrice)                    newPrice = maxPrice;                if (newPrice <= 0.0)                    newPrice = oldSellPrice;                double buyPrice = item.getBuyPrice();                if (newPrice > buyPrice)                    newPrice = oldSellPrice;                double minPrice = DeluxeBazaar.getInstance().itemsFile.getDouble("items." + item + ".min_prices.sell", 0.0);                if (minPrice > 0.0 && minPrice > newPrice)                    newPrice = minPrice;                item.setSellPrice(newPrice);            }        }    }    */}